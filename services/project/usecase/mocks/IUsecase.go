// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "dot-rahadian-ardya-kotopanjang/model"

	mock "github.com/stretchr/testify/mock"

	wrapper "dot-rahadian-ardya-kotopanjang/pkg/wrapper"
)

// IUsecase is an autogenerated mock type for the IUsecase type
type IUsecase struct {
	mock.Mock
}

// CreateProject provides a mock function with given fields: ctx, param
func (_m *IUsecase) CreateProject(ctx context.Context, param model.Project) wrapper.Result {
	ret := _m.Called(ctx, param)

	var r0 wrapper.Result
	if rf, ok := ret.Get(0).(func(context.Context, model.Project) wrapper.Result); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(wrapper.Result)
	}

	return r0
}

// DeleteProject provides a mock function with given fields: ctx, projectId
func (_m *IUsecase) DeleteProject(ctx context.Context, projectId uint) wrapper.Result {
	ret := _m.Called(ctx, projectId)

	var r0 wrapper.Result
	if rf, ok := ret.Get(0).(func(context.Context, uint) wrapper.Result); ok {
		r0 = rf(ctx, projectId)
	} else {
		r0 = ret.Get(0).(wrapper.Result)
	}

	return r0
}

// GetAllProject provides a mock function with given fields: ctx
func (_m *IUsecase) GetAllProject(ctx context.Context) wrapper.Result {
	ret := _m.Called(ctx)

	var r0 wrapper.Result
	if rf, ok := ret.Get(0).(func(context.Context) wrapper.Result); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(wrapper.Result)
	}

	return r0
}

// GetProjectById provides a mock function with given fields: ctx, id
func (_m *IUsecase) GetProjectById(ctx context.Context, id uint) wrapper.Result {
	ret := _m.Called(ctx, id)

	var r0 wrapper.Result
	if rf, ok := ret.Get(0).(func(context.Context, uint) wrapper.Result); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(wrapper.Result)
	}

	return r0
}

// UpdateProject provides a mock function with given fields: ctx, param
func (_m *IUsecase) UpdateProject(ctx context.Context, param model.Project) wrapper.Result {
	ret := _m.Called(ctx, param)

	var r0 wrapper.Result
	if rf, ok := ret.Get(0).(func(context.Context, model.Project) wrapper.Result); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(wrapper.Result)
	}

	return r0
}

// UpdateProjectProgress provides a mock function with given fields: ctx, projectId, progress
func (_m *IUsecase) UpdateProjectProgress(ctx context.Context, projectId uint, progress float64) wrapper.Result {
	ret := _m.Called(ctx, projectId, progress)

	var r0 wrapper.Result
	if rf, ok := ret.Get(0).(func(context.Context, uint, float64) wrapper.Result); ok {
		r0 = rf(ctx, projectId, progress)
	} else {
		r0 = ret.Get(0).(wrapper.Result)
	}

	return r0
}

type mockConstructorTestingTNewIUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUsecase creates a new instance of IUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUsecase(t mockConstructorTestingTNewIUsecase) *IUsecase {
	mock := &IUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
