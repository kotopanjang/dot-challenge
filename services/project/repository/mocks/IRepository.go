// Code generated by mockery v2.23.1. DO NOT EDIT.

package mocks

import (
	model "dot-rahadian-ardya-kotopanjang/model"

	mock "github.com/stretchr/testify/mock"
)

// IRepository is an autogenerated mock type for the IRepository type
type IRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *IRepository) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *IRepository) FindAll() ([]model.Project, error) {
	ret := _m.Called()

	var r0 []model.Project
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Project, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Project); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Project)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *IRepository) FindById(id uint) (*model.Project, error) {
	ret := _m.Called(id)

	var r0 *model.Project
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*model.Project, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *model.Project); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Project)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: projectParam
func (_m *IRepository) Insert(projectParam model.Project) (uint, error) {
	ret := _m.Called(projectParam)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(model.Project) (uint, error)); ok {
		return rf(projectParam)
	}
	if rf, ok := ret.Get(0).(func(model.Project) uint); ok {
		r0 = rf(projectParam)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(model.Project) error); ok {
		r1 = rf(projectParam)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: project
func (_m *IRepository) Update(project *model.Project) error {
	ret := _m.Called(project)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Project) error); ok {
		r0 = rf(project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateByField provides a mock function with given fields: projectId, field, value
func (_m *IRepository) UpdateByField(projectId uint, field string, value interface{}) error {
	ret := _m.Called(projectId, field, value)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, string, interface{}) error); ok {
		r0 = rf(projectId, field, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewIRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepository creates a new instance of IRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepository(t mockConstructorTestingTNewIRepository) *IRepository {
	mock := &IRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
